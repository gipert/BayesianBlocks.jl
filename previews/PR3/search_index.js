var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DocTestSetup  = quote\n    using BayesianBlocks\nend","category":"page"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [BayesianBlocks]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#BayesianBlocks.BayesianBlocks","page":"API","title":"BayesianBlocks.BayesianBlocks","text":"BayesianBlocks\n\nBayesian Blocks algorithm described in Scargle 2021.\n\n\n\n\n\n","category":"module"},{"location":"api/#BayesianBlocks.partition-Tuple{Vector{var\"#s6\"} where var\"#s6\"<:Real}","page":"API","title":"BayesianBlocks.partition","text":"partition(data, logfitness=:cash, logprior=:p0, progress=false, ...)\n\nReturn an array of optimal change points for a set of one-dimensional data (observations or an histogram of them). This is the implementation of the bayesian blocks algorithm, as outlined in [1].\n\nArguments\n\ndata: numeric array or a StatsBase.Histogram\nlogfitness: log of the block fitness function to be used, choose between [:cash]\nlogprior: log of the prior distribution on the number of blocks to be used,  choose between [:gamma, :p0]\ngamma, p0...: set the parameter value for the specified prior distribution\nprogress: display a progress bar for long computations\n\nExample\n\nusing Distributions, StatsBase, Plots, LinearAlgebra\n\ndata = vcat(rand(Normal(0),1000),rand(Cauchy(5),1000))\ndata = data[(data .> -5) .& (data .< 10)]\n\nh = fit(Histogram, data, -5:0.1:10)\n\n# choose to use all data or an histogram of it!\nhb = fit(Histogram, data, BayesianBlocks.partition(data))\nhb = fit(Histogram, data, BayesianBlocks.partition(h))\n\nplot(data, normalized=true, st=:stephist, nbins=1000)\nplot!(normalize(hb), st=:step, w = 3)\n\nPerformance tips\n\nYou can convert your data container to a less precise representation to improve the performance a bit, e.g.\n\nx::Array{Float32} = [1.1, π, (√5-1)/2]\n\n[1]: Scargle, J et al. (2012) [https://doi.org/10.1088/0004-637X/764/2/167]\n\n\n\n\n\n","category":"method"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#BayesianBlocks.jl","page":"Home","title":"BayesianBlocks.jl","text":"","category":"section"}]
}
